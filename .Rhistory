require(ggplot2)
require(stringr)
require(httr)
require(dplyr)
write.csv(residential2017_sales_bill_select, file="D:\\Urban3\\Projects\\NC\\buncombe_co\\analyzed_data\\r_output\\residential2017_sales_bill_select.csv")
```{r ,eval=FALSE, echo=FALSE, message=FALSE, results=FALSE}
sales_data_features<-rbind.data.frame(sales_data$features)
```{r eval=TRUE, echo=FALSE}
sales_data_table<-read.csv("D:\\Urban3\\Projects\\NC\\buncombe_co\\analyzed_data\\r_output\\sales_data_properties.csv", header=TRUE)
sales_data_table<-read.csv("D:\\Urban3\\Projects\\NC\\buncombe_co\\analyzed_data\\r_output\\sales_data_properties.csv", header=TRUE)
taxbill2017_table<-read.csv("D:\\Urban3\\Projects\\NC\\buncombe_co\\analyzed_data\\r_output\\taxbill2017_properties.csv", header=TRUE)
residential2017_table<-read.csv("D:\\Urban3\\Projects\\NC\\buncombe_co\\analyzed_data\\r_output\\residential_2017_properties.csv", header=TRUE)
parcelsnapshot2017_table<-read.csv("D:\\Urban3\\Projects\\NC\\buncombe_co\\analyzed_data\\r_output\\parcel_snapshot_2017_properties.csv", header=TRUE)
#Extract the year from the data field
sales_year<-as.data.frame(sapply(strsplit(sales_data_table$SellDate, "-"), `[`,1))
#Extract the year from the data field
sales_year<-as.data.frame(sapply(strsplit(sales_data_table$SellDate, "-"), `[`,1))
names(sales_year)<-c("SALES_YEAR")
sales_data_table<-cbind(sales_data_table, sales_year)
sales_data_table$PIN<-str_replace_all(sales_data_table$PINN, "-", "")
sales_data_table$PIN<-str_replace_all(sales_data_table$PINN, "-", "")
sales_data_table$SALES_YEAR<-as.numeric(sales_data_table$SALES_YEAR)
sales_data_table<-cbind(sales_data_table, sales_year)
sales_data_table$PIN<-str_replace_all(sales_data_table$PINN, "-", "")
sales_data_table$SALES_YEAR<-as.numeric(sales_data_table$SALES_YEAR)
#Extract the most recent sale record
sales_data_table_year<-sales_data_table %>%
filter(QualifiedSale=='Y')  %>% #Select qualified sales only
group_by(PINN) %>% #Group by parcel ID
top_n(1, abs(SellNo)) #Select the parcel ID with the highest sequential sell number
#Extract the year from the data field
sales_year<-as.data.frame(sapply(strsplit(sales_data_table$SellDate, "-"), `[`,1))
names(sales_year)<-c("SALES_YEAR")
sales_data_table<-cbind(sales_data_table, sales_year)
sales_data_table$PIN<-str_replace_all(sales_data_table$PINN, "-", "")
#Extract the most recent sale record
sales_data_table_year<-sales_data_table %>%
filter(QualifiedSale=='Y')  %>% #Select qualified sales only
group_by(PINN) %>% #Group by parcel ID
top_n(1, abs(SellNo)) #Select the parcel ID with the highest sequential sell number
sales_data_table<-read.csv("D:\\Urban3\\Projects\\NC\\buncombe_co\\analyzed_data\\r_output\\sales_data_properties.csv", header=TRUE)
View(sales_data_table)
names(sales_year)<-c("SALES_YEAR")
sales_data_table<-cbind(sales_data_table, sales_year)
sales_data_table$PIN<-str_replace_all(sales_data_table$PINN, "-", "")
sales_data_table$SALES_YEAR<-as.numeric(sales_data_table$SALES_YEAR)
#Extract the most recent sale record
sales_data_table_year<-sales_data_table %>%
filter(QualifiedSale=='Y')  %>% #Select qualified sales only
group_by(PINN) %>% #Group by parcel ID
top_n(1, abs(SellNo)) #Select the parcel ID with the highest sequential sell number
residential2017_table_dissolve<-residential2017_table %>%
group_by(PIN) %>% #Group by Parcel ID
summarize(SqFeet = sum(SqFeet),
FinishedSqFt = sum(FinishedSqFt),
YearBuilt=first(YearBuilt),
Grade=first(Grade),
Condition=first(Condition),
FullBath=sum(FullBath),
HalfBath=sum(HalfBath),
Bedroom=sum(Bedroom))
##Merge Sales and Residential 2017
residential2017_sales<-merge(parcelsnapshot2017_table, sales_data_table_year, by="PIN", all.x=TRUE)
##Merge Sales and Residential 2017
residential2017_sales<-merge(parcelsnapshot2017_table, sales_data_table_year, by="PIN", all.x=TRUE)
length(unique(residential2017_sales$PINN))
names(residential2017_sales)
names(residential2017_sales)
##Add residential features fields
residential2017_sales_features<-merge(residential2017_sales, residential2017_table_dissolve, by="PIN", all.x=TRUE)
length(unique(residential2017_sales_features$OBJECTID))
names(residential2017_sales_features)
##Add Tax bill fields
taxbill2017_table$PIN<-str_replace_all(taxbill2017_table$pin, "-", "")
taxbill2017_table$dup<-duplicated(taxbill2017_table$PIN)
taxbill2017_table_abbr<-taxbill2017_table %>%
filter(real_value>0 | personal_value==0) %>%
filter(PIN !="") %>%
filter(dup == 'FALSE') %>%
select(PIN, tax_due)
residential2017_sales_bill<-merge(residential2017_sales_features, taxbill2017_table_abbr, by="PIN", all.x=TRUE)
residential2017_sales_bill$sales_ratio<-residential2017_sales_bill$TaxValue/residential2017_sales_bill$SellingPrice
residential2017_sales_bill$effective_tax_rate<-as.numeric(residential2017_sales_bill$tax_due)/residential2017_sales_bill$SellingPrice
##Select Records with Complete Data
residential2017_sales_bill_select<-residential2017_sales_bill%>%
filter(SellingPrice>10000 & TaxValue>0)%>%
filter(VacantLot =='N' | Class.y=='RES') %>%
filter(SALES_YEAR %in% (2013:2017))%>%
filter(SALES_YEAR>YearBuilt)%>%
select(PIN, SellingPrice, SALES_YEAR, TaxValue, effective_tax_rate, sales_ratio)
write.csv(residential2017_sales_bill_select, file="D:\\Urban3\\Projects\\NC\\buncombe_co\\analyzed_data\\r_output\\residential2017_sales_bill_select.csv")
View(residential2017_sales_bill_select)
names(residential2017_sales_bill)
##Select Records with Complete Data
residential2017_sales_bill_select<-residential2017_sales_bill%>%
filter(SellingPrice>10000 & TaxValue>0)%>%
filter(VacantLot =='N' | Class.y=='RES') %>%
filter(SALES_YEAR %in% (2013:2017))%>%
filter(SALES_YEAR>YearBuilt)%>%
select(PIN, SellingPrice, SALES_YEAR, TaxValue, effective_tax_rate, sales_ratio, PINN)
write.csv(residential2017_sales_bill_select, file="D:\\Urban3\\Projects\\NC\\buncombe_co\\analyzed_data\\r_output\\residential2017_sales_bill_select.csv")
